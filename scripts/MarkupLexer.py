# Generated from ./MarkupLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,9,77,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,
        2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,1,1,
        1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,5,5,41,8,5,10,5,12,
        5,44,9,5,1,5,1,5,4,5,48,8,5,11,5,12,5,49,1,5,5,5,53,8,5,10,5,12,
        5,56,9,5,3,5,58,8,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,9,4,9,69,8,
        9,11,9,12,9,70,1,10,1,10,1,10,1,10,1,10,0,0,11,3,1,5,2,7,3,9,4,11,
        5,13,6,15,0,17,0,19,7,21,8,23,9,3,0,1,2,4,4,0,10,10,47,47,91,91,
        93,93,5,0,10,10,47,47,61,61,91,91,93,93,1,0,97,122,2,0,32,32,91,
        91,77,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,1,19,1,0,0,0,2,21,1,0,0,0,2,23,1,0,0,0,3,25,1,0,0,
        0,5,27,1,0,0,0,7,29,1,0,0,0,9,31,1,0,0,0,11,33,1,0,0,0,13,57,1,0,
        0,0,15,59,1,0,0,0,17,61,1,0,0,0,19,63,1,0,0,0,21,68,1,0,0,0,23,72,
        1,0,0,0,25,26,5,91,0,0,26,4,1,0,0,0,27,28,5,93,0,0,28,6,1,0,0,0,
        29,30,5,47,0,0,30,8,1,0,0,0,31,32,5,10,0,0,32,10,1,0,0,0,33,34,5,
        61,0,0,34,35,5,61,0,0,35,36,1,0,0,0,36,37,6,4,0,0,37,12,1,0,0,0,
        38,42,3,15,6,0,39,41,3,17,7,0,40,39,1,0,0,0,41,44,1,0,0,0,42,40,
        1,0,0,0,42,43,1,0,0,0,43,58,1,0,0,0,44,42,1,0,0,0,45,47,3,17,7,0,
        46,48,3,15,6,0,47,46,1,0,0,0,48,49,1,0,0,0,49,47,1,0,0,0,49,50,1,
        0,0,0,50,54,1,0,0,0,51,53,3,17,7,0,52,51,1,0,0,0,53,56,1,0,0,0,54,
        52,1,0,0,0,54,55,1,0,0,0,55,58,1,0,0,0,56,54,1,0,0,0,57,38,1,0,0,
        0,57,45,1,0,0,0,58,14,1,0,0,0,59,60,8,0,0,0,60,16,1,0,0,0,61,62,
        8,1,0,0,62,18,1,0,0,0,63,64,7,2,0,0,64,65,1,0,0,0,65,66,6,8,1,0,
        66,20,1,0,0,0,67,69,8,3,0,0,68,67,1,0,0,0,69,70,1,0,0,0,70,68,1,
        0,0,0,70,71,1,0,0,0,71,22,1,0,0,0,72,73,5,32,0,0,73,74,1,0,0,0,74,
        75,6,10,2,0,75,76,6,10,2,0,76,24,1,0,0,0,8,0,1,2,42,49,54,57,70,
        3,5,1,0,5,2,0,4,0,0
    ]

class MarkupLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    M_CTRL = 1
    M_CTRLCONT = 2

    OPEN = 1
    CLOSE = 2
    WSEP = 3
    NL = 4
    CTRL_START = 5
    TEXT = 6
    M_CTRL_KIND = 7
    M_CTRL_CONT = 8
    M_CTRL_END = 9

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "M_CTRL", "M_CTRLCONT" ]

    literalNames = [ "<INVALID>",
            "'['", "']'", "'/'", "'\\n'", "'=='", "' '" ]

    symbolicNames = [ "<INVALID>",
            "OPEN", "CLOSE", "WSEP", "NL", "CTRL_START", "TEXT", "M_CTRL_KIND", 
            "M_CTRL_CONT", "M_CTRL_END" ]

    ruleNames = [ "OPEN", "CLOSE", "WSEP", "NL", "CTRL_START", "TEXT", "F_NON_CTRL_TEXT", 
                  "F_TEXT", "M_CTRL_KIND", "M_CTRL_CONT", "M_CTRL_END" ]

    grammarFileName = "MarkupLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


